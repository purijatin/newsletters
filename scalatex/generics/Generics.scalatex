@import Main._
@import scalatex.site._

@import scalatex.site.Section

@a(
  href:="https://github.com/purijatin/newsletters",
  position.absolute,
  top:=0,right:=0,border:=0,
  img(
    src:="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67",
    alt:="Fork me on GitHub"
  )
)
@def exampleWrapper(f: Frag*) = Seq(
  hr,
  div(
    opacity:="0.6",
    fontStyle.oblique,
    f
  ),
  hr
)
@def pairs(frags: Frag*) = div(frags, div(clear:="both"))
@def half(frags: Frag*) = div(frags, width:="50%", float.left)

@sect("Polymorphism")
  @p
    I wrote a book by accident. Get some coffee first.
  @p
    	Parametric Polymorphism is the ability to express data and functions over an abstract type but without specifying it. It is powerful in a sense that it lets you model behavior effectively.

  @p 
  		Different languages have chosen different tradeoffs between code footprint and abstraction to implement Parametric Polymorphism, hence giving rise to different flavors in implementation.
  		Java's type system is not as expressive as one would like it to be, but never the less has a mechanism to do Parametric Polymorphism with a construct called @code{Generics}.

  @sect{Generics}
    @p 
        Generics are called and implemented differently in different languages. Two of the well known implementations are using:

    @sect{Type Erasure} 
        @p 
            Compiler by a process called as Homogeneous Translation erases all possible reference translations of a class at compile time to one class at runtime. 
            This is what Java compiler also does:
        @pairs
          @half
            @hl.scala
              List<Dog> ls = new ArrayList<Dog>()
              List<Long> ls = new ArrayList<Long>()
          @half
            @exampleWrapper
               @p
                At runtime, both the statements on left gets converted to:
               @hl.scala
                List ls = new ArrayList();

        @p
            This technique is called as Type Erasure. Simply put, generics are a compile-time creation and runtime has no clue about their existence. 
            Compiler provides adequate type-safety at compile time but @code{erases} them at runtime. 
        @p
            In Java8, there is no special byte-code for Generic classes or generic methods. They dont exist in reality
            This also means, it is difficult to know the exact generic type of list at runtime. (Not impossible though. See below). As a side-effect:
        @div
        @hl.highlight(
          """  public void evaluate(List<Integer> ls)
  public void evaluate(List<String> ls)
  //both the above gets compiled to the same method below (to verify do `javap -c file.class`):

  public void evaluate(List ls)
  //This is why you cannot do method-overloading based on generic type as they compile down to same method causing conflict""",
          "scala"
        )     

        @p
          Nor can you do below:
        @div
          @hl.highlight(
            """  class Sample<T>{
    T ob = new T(); //not possible
 }""",
            "scala"
          ) 

        @p
          Never the less Type-Erasure has been a vital reason for the success of JVM (more on it below)
        @p

    @sect{Reification}

        @p
            An alternative way to implement generics is using a process called Heterogenous Translation. Languages like C++ and C# have a provision where they create a specialized class for each instantiation of a template.
            An example of this in Java, is something called @b{Specializations} to be introduced in java9 under @a("Project-Valhalla",href:="http://openjdk.java.net/projects/valhalla/")
        @hl.ref(wd/'generics/'src/'main/'resources/"Java9.java")
        @p
            Notice @code{List<int>.class} prints @b{java.anyutil.List${0=I}} and @code{java.util.List.class} prints @b{java.util.List}. This means information about Parametric Types are also embedded at runtime. 
            @code{List<int>} is aware of it being a list of @code{int's}. The information is not erased. (Though this functionality will only be available only for primitives and value classes in Java9)

        @p
            This ability to contain the type information at runtime is called @code{reifiability}. In Java all primitives, non-generic classes are reifiable (More details in @a("JLS",href:="https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.7")). Another classic example are @code{Arrays} in Java:
        @pairs
            @half
              @hl.ref(wd/'generics/'src/'main/'java/"Reify.java", start="Dog[]", end="//end")
            @half
              @exampleWrapper
                @hl.ref(wd/'generics/'src/'main/'java/"Animal.java")        
            
        @hr
        @p
            Generics in java were introduced in java5. They are erased for so as to be compatible with pre-java5 code. 
        @hl.scala
            public void get(List ls){}
            get(new ArrayList<Animal>()) //This would not have compiled if the types were reified as then the byte-code would have changed
        @p
            Type-Erasure has been a vital success on JVM. More so as other JVM languages like Groovy, Clojure, Scala, Kotlin etc have been able to do their innovation with no limitation on the runtime-side. 
            This would had certainly not been possible if generics were reified. To explain further: @u{Being able to inspect types at runtime undermines the knowledge you have about types at compile time}.
            We will see more on this later.
                    
  @sect{Sub-Typing (<:)}     
    @p
      What do we mean when we say @b{Dog is a sub-type of Animal}?  
    @sect{Liskov Substitution}
      @p
        @a("Liskov Substitution Principle",href:="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/venari/papers/subtype-tr/paper.ps") tells that:
        @blockquote{If "A" extends "B" (A <: B), then all the things that can be done with "B" should also be legal with "A"}
      @p 
        i.e. If Dog extends Animal, then the animal object can be legally replaceable by the dog object all through. 
      @p Glossary of notations:
      @ul
        @li 
          Subtype @code{<:} - This can be read as @b{extends}. Example: @b{Dog extends Animal}. @code{Dog <: Animal}
        @li 
          Supertype @code{>:} - The opposite of @code{<:}. Example: @b{Animal is a Supertype of Dog}. @code{Animal >: Dog}
        @li 
          @code{=:=} - Neither Sub or Super type. If @code{A =:= B} then A and B are same
        
      @p
        We will now see sub-typing influences generics and its influence on class design.
  @sect{Variance}
    @p
      This is as intense as it can get, but hold on. It is the one ring to rule them all in Generics world.
    @sect{Co-Variance}
      @p 
        Let @code{M<X>} be a class with @code{X} as its generic type. @code{M} is said to be co-variant with its generic type if:
      @hl.scala
        If A <: B, then M<A> <: M<B>
      @p 
        Arrays in Java are co-variant. 
      @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="Animal a", end="//end")
    @sect{Contra-Variance}
      @p 
        Let @code{M<X>} be a class with @code{X} as its generic type. @code{M} is said to be contra-variant with its generic type if:
      @hl.scala
        If A <: B, then M<A> >: M<B>
      @code{andThen} method in @a("Consumer.java",href:="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html#andThen-java.util.function.Consumer-") is contra-variant in its argument type
      @hl.scala
        default Consumer<T> andThen(Consumer<? super T> after)
      
    @sect{In-Variance}  
      @p 
        If class is neither co-varianct nor contra-variant in its generic type, then it is invariant. Generics (without usage of wild-card) in java are invariant.
      @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="List<Animal>", end="//end")        
      @p
      	Java's type system does not give a provison to have co-variant and contra-variant generic classess. Yet there is a provison to almost provide them using wildcards (Frankly the experience is far from right)
  @sect{Raw type (?)}        
    @p
      @code{?} is a wild card or a hack. A wild-card can be read as @b{some unknown type}. So when we say:
    @hl.scala
      List<?> ls ;
    @p It means `ls` is a list of some unknown type which we do not precisely know. Raw types are a bridge between pre and post Java5 code.
    @pairs
      @half
        @hl.scala
          List<Integer>  <:  List<?>
          List<?>  <: List
          // Hence by transitivity,          
          List<Integer> <: List
      @half
        @exampleWrapper
          @hl.scala
            List<?> ls = new ArrayList<Integer>();
            List ls2 = ls;
            // Hence by transitivity,
            List ls3 = new ArrayList<Integer>();
    @p 
      This sub-typing relationship made post java-5 code backward compatible. Wild cards are only possible in a language where generics are implemented using erasure. List<?> would make no sense in reifiable world (what would it mean at runtime?)
      Wild card's also let you provide bounds, thus enabling co-variance and contra-variance behavior in Java:
    @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="List<?>", end="//end")        
  @sect{Case-Studies}
    @sect{Co-Variant Arrays}
      @p
        We saw at @sect.ref{Co-Variance} example, that arrays in java are co-variant:
      @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="arrays()", end="//end")
      @p
        Line (1),(2),(3) would throw a ArrayStoreException at runtime. Why? because if it doesn't, then this will:
      @hl.scala
        Dog d = dogs[1];
        //BOOM! ClassCastException
      @p
        @u{Shouldn't the compiler have caught this wrong doing at compile time?}. There is no point of static-typing if the compiler cant prevent these.
        Turns out the culprit is making arrays as @code{co-variant}. i.e. the ability to do @code{Animal[] ob = dogs} at line-a has put us in trouble.

      @p
        Co-Variant Arrays are also a reason why arrays of generic classes are illegal:
      @pairs
        @half
          @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="ArrayList<String>[]", end="//end")  
        @half
          @exampleWrapper
            @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="//If it", end="//end")  
      @p
        Hence the compiler does not let you create arrays of generic classes. Though there is an exception:
        @hl.scala
          ArrayList<?>[] ls = new ArrayList<?>[0];
        @p 
          The explanation on why its legal is left as food for thought to readers.  

      @p
        Co-Variant Arrays is language blunder. In one of the talks, Martin Odersky had mentioned that this decision was made as a tradeoff to be able to do below in initial java version:
      @hl.scala
        public static void sort(Object[] a) //Arrays.sort
      @p
        Without arrays being co-variant it would had been impossible to have a sort method, which could take any kind of arrays to sort (Remember there was no generics then, so the only way to be able to take all kinds of array as argument was to make them co-variant). Obviously many modern languages have marked Arrays as invariant. 
      @p 
        Another important insight we get from above experience is: @b{Co-variance might not go well with mutability}
    @sect{Reads & Writes}    
      @sect{Reads}
        @p
          Hi
  @hr
  @sect{More Interesting Stuff}
    @p 
      Mind You! Some super awesome stuff on the way. Chuck everything on this page, this is breaking the barrior!
    @sect{Capture Type}
      @p
        Is it possible to obtain @u{information about generic types at runtime?}. Well it is possible, but its dirty:
      
      @hl.ref(wd/'generics/'src/'main/'java/"GetType.java",start="Outer",end="//end")           
      @hl.ref(wd/'generics/'src/'main/'java/"GetType.java",start="Field",end="//end")           
      
      @p
        Once you have @code{claz} variable, you can then create its instances. Lets go a step ahead... 
      @p 
        Low lets try building a class which will make it very easy to access parametric type information. I have called the class @a("CaptureType",href:="https://gist.github.com/purijatin/a0486995c7df0e56b398") and it lets you @u{capture the generic type of a parametrized class}.
        Some use cases:
      @hl.ref(wd/'generics/'src/'main/'java/'types/"UseCases.java", start="Example<S>",end="//end")       
      @p
        So now we are able to get Integer.class object at runtime. Some more bazooka stuff:
      @hl.ref(wd/'generics/'src/'main/'java/'types/"UseCases.java", start="X<T>",end="//end")
      @p
        Works! This is what @a("mockito",href:="http://mockito.org/") exactly does (In fact @code{CaptureType} was inspired from mockito).
        Though there are some limitations:
      @hl.ref(wd/'generics/'src/'main/'resources/"Wontwork.java")
      @p 
        Please look at the @a("source",href:="https://gist.github.com/purijatin/a0486995c7df0e56b398") to know more.


        


    
      
      

        
          
        

    	
