@import Main._
@import scalatex.site._

@import scalatex.site.Section

@a(
  href:="https://github.com/purijatin/newsletters",
  position.absolute,
  top:=0,right:=0,border:=0,
  img(
    src:="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67",
    alt:="Fork me on GitHub"
  )
)
@def exampleWrapper(f: Frag*) = Seq(
  hr,
  div(
    opacity:="0.6",
    fontStyle.oblique,
    f
  ),
  hr
)
@def pairs(frags: Frag*) = div(frags, div(clear:="both"))
@def half(frags: Frag*) = div(frags, width:="50%", float.left)

@sect("Polymorphism")

  @p
    	Polymorphism is the ability to express the same thing in different forms (Poly=Many, Morph=Form). There are multiple flavors to polymorphism.
      One very well known flavor is in OOP with inheritance. But there are several different flavors which are quite powerful never the less.
      One of them is Parametric Polymorphism.
  @p
  		 To simply explain it, one can write a data type or function generically without depending upon their precise parametric (aka generic) type. And this parametric type is instantiated with particular type when needed.
       One very interesting property of this is that: All the instances of a generic function/data type behave the same irrespective of their parametric type.

  @p
     Java gives us ability to do Parametric Polymorphism with a construct called @code{Generics}.

@sect{Generics}
  @p 
      Generics are named and implemented differently in different languages. Two of the well known implementations are using:

  @sect{Type Erasure} 
      @p 
          Compiler by a process called as Homogeneous Translation erases all possible reference translations of a class at compile time to one class at runtime. 
          This is what Java compiler also does:
      @pairs
        @half
          @hl.scala
            List<Dog> ls = new ArrayList<Dog>()
            List<Long> ls = new ArrayList<Long>()
        @half
          @exampleWrapper
             @p
              At runtime, both the statements on left gets converted to:
             @hl.scala
                List ls = new ArrayList();

      @p
          This technique is called as Type Erasure. Simply put, generics are a compile-time creation and runtime has no clue about their existence. 
          Compiler provides adequate type-safety at compile time but @code{erases} them at runtime. 
      @p
          In Java8, there is no special byte-code for Generic classes or generic methods. They dont exist in reality.
          This also means, it is difficult to know the exact generic type of list at runtime. (Not impossible though. See @sect.ref{Capture Type}). As a side-effect:
      @div
        @hl.highlight(
          """  public void evaluate(List<Integer> ls)
  public void evaluate(List<String> ls)
  //both the above gets compiled to the same method below (to verify do `javap -c file.class`):

  public void evaluate(List ls)
  //This is why you cannot do method-overloading based on generic type as they compile down to same method causing conflict""",
          "scala"
        )     

      @p
        Nor can you do below:
      @div
        @hl.highlight(
            """  class Sample<T>{
    T ob = new T(); //not possible
 }""",
            "scala"
          ) 

      @p
        Never the less Type-Erasure has been a vital reason for the success of JVM (more on it below)
      @p
  @sect{Reification}
      @p
          An alternative way to implement generics is using a process called Heterogenous Translation. Languages like C++ and C# have a provision where they create a specialized class for each instantiation of a template.
          An example of this in Java, is something called @b{Specializations} to be introduced in java9 under @a("Project-Valhalla",href:="http://openjdk.java.net/projects/valhalla/")
      @hl.ref(wd/'generics/'src/'main/'resources/"Java9.java")
      @p
          Notice @code{List<int>.class} prints @b{java.anyutil.List${0=I}} and @code{java.util.List.class} prints @b{java.util.List}. This means information about Parametric Types is also embedded at runtime. 
          @code{List<int>} is aware of it being a list of @code{int's}. The information is not erased. (Though this functionality will be available only for primitives and @a("value",href:="http://cr.openjdk.java.net/~jrose/values/values-0.html") classes in Java9. A special type variable identifier @code{any} is introduced for this enhanced treatment)
      @p
          This ability to contain the type information at runtime is called @code{reifiability}. In Java all primitives, non-generic classes are reifiable (More details in @a("JLS",href:="https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.7")). Another classic example are @code{Arrays} in Java. Arrays in Java are refifiable:
      @pairs
          @half
            @hl.ref(wd/'generics/'src/'main/'java/"Reify.java", start="Dog[]", end="//end")
          @half
            @exampleWrapper
              @hl.ref(wd/'generics/'src/'main/'java/"Animal.java")        
          
      @hr
      @p
          Generics in java were introduced in java5. They are erased for so as to be compatible with pre-java5 code. 
      @hl.scala
          public void get(List ls){}
          get(new ArrayList<Animal>()) //This would not have compiled if the types were reified as then the byte-code would have changed
      @p
          Type-Erasure has been a vital success on JVM. More so as other JVM languages like Groovy, Clojure, Scala, Kotlin etc have been able to do their innovation with no limitation on the runtime-side. 
          This would had certainly not been possible if generics were reified. To explain further: @u{Being able to inspect types at runtime undermines the knowledge you have about types at compile time}.
          We will see more on this later.
                    
@sect{Sub-Typing (<:)}     
    @p
      What do we mean when we say @b{Dog is a sub-type of Animal}?  
    @sect{Liskov Substitution}
      @p
        @a("Liskov Substitution Principle",href:="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/venari/papers/subtype-tr/paper.ps") tells that:
        @blockquote{If "A" extends "B" (A <: B), then all the things that can be done with "B" should also be legal with "A"}
      @p 
        An easier way to remember this is to think @code{A <: B} as @code{A is subset of B}.
      @p Glossary of notations:
      @ul
        @li 
          Subtype @code{<:} - This can be read as @b{extends}. Example: @b{Dog extends Animal}. @code{Dog <: Animal}
        @li 
          Supertype @code{>:} - The opposite of @code{<:}. Example: @b{Animal is a Supertype of Dog}. @code{Animal >: Dog}
        @li 
          @code{=:=} - Neither Sub or Super type. If @code{A =:= B} then A and B are same
        
      @p
        We will now see the sub-typing of generic class and its influence on api design.
  @sect{Variance}
    @p
      This is as intense as it can get, but hold on. It is the one ring to rule them all in Generics world.
    @sect{Co-Variance}
      @p 
        Let @code{M<X>} be a class with @code{X} as its generic type. @code{M} is said to be co-variant with its generic type if:
      @hl.scala
        If A <: B, then M<A> <: M<B>
      @p 
        Arrays in Java are co-variant. 
      @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="Animal a", end="//end")
    @sect{Contra-Variance}
      @p 
        Let @code{M<X>} be a class with @code{X} as its generic type. @code{M} is said to be contra-variant with its generic type if:
      @hl.scala
        If A <: B, then M<A> >: M<B>
      @code{andThen} method in @a("Consumer.java",href:="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html#andThen-java.util.function.Consumer-") is contra-variant in its argument type
      @hl.scala
        default Consumer<T> andThen(Consumer<? super T> after)
      
    @sect{In-Variance}  
      @p 
        If generic class is neither co-varianct nor contra-variant then it is invariant. Generics in Java are Invariant.
      @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="List<Animal>", end="//end")        
      @p
        If you observe, a very interesting behavior pops up when you compare arrays and generics. @blockquote{@u{Arrays are covariant and generics are invariant. Why?}}The rest of this post will affirm on why generics are rightly invariant and the dangers posed by arrays by being covariant.
    @sect{Wildcards (?)}        
      @p
        @code{?} is a wild card or a hack. A wild-card can be read as @b{some unknown type}. So when we say:
      @hl.scala
        List<?> ls ;
      @p It means `ls` is a list of some unknown type which we do not precisely know. Wild card is a bridge between pre and post Java5 code.
        @pairs
        @half
          @hl.scala
            List<Integer>  <:  List<?>
            List<?>  <: List
            // Hence by transitivity,          
            List<Integer> <: List
        @half
          @exampleWrapper
            @hl.scala
              List<?> ls = new ArrayList<Integer>();
              List ls2 = ls;
              // Hence by transitivity,
              List ls3 = new ArrayList<Integer>();
      @p 
        This sub-typing relationship made post java-5 code backward compatible. Wild cards are only possible in a language where generics are implemented using erasure. List<?> would make not make much sense in reifiable world (C++ does have template methods, so it retains behavioral parametricity but not data parametricity).
      @p  
        Java's type system does not give a provison to have co-variant and contra-variant generic classess. But willd card's let you provide bounds, thus enabling co-variance and contra-variance @i{like} behavior in Java (Frankly the experience is far from right). 
        In Java, every type variable declared as a type parameter has a bound. If no bound is declared for a type variable, @code{Object} is assumed. 
        Wildcards are useful in situations where only partial knowledge about the type parameter is required. This property combined with bounds can be very useful:
      @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="List<?>", end="//end") 
      @p
        In Java, co-variance and contra-variance of generics is not possible first-hand. But using bounds with wildcards, you can replicate the behavior as a second class citizen.
      @div(opacity:="0.5",fontStyle.oblique)
        @p
          For people interested in theory behind wildcards: Wildcards are a restricted form of existential types (Remember @a("Existential Quantifier",href:="http://en.wikipedia.org/wiki/Existential_quantification") in Mathematics).
          So say if you have `SomeClass<X extends String>`, then `SomeClass<?>` is a shorthand for`SomeClass<T> forSome{type T <: String}`.
  @sect{Case-Studies}
    @sect{Co-Variant Arrays}
      @p
        We saw at @sect.ref{Co-Variance} example, that arrays in java are co-variant:
      @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="arrays()", end="//end")
      @p
        Line (1),(2),(3) would throw a ArrayStoreException at runtime. Why? because if it doesn't, then this will:
      @hl.scala
        Dog d = dogs[1]; 
        //dogs[1] is a String
        //BOOM! ClassCastException
      @p
        @u{Shouldn't the compiler have caught this wrong doing (i.e. Line(1),(2),(3))) at compile time?}. 
        The culprit is making arrays as @code{co-variant}. i.e. the ability to do @code{Animal[] ob = dogs} at line-a has put us in trouble.

      @p
        Co-Variant Arrays is language blunder. In one of the talks, Martin Odersky (creator of javac for java5) had mentioned that co-variance of arrays decision was made as a tradeoff to be able to do below in initial java version:
      @hl.scala
        public static void sort(Object[] a) //Arrays.sort
      @p
        Without arrays being co-variant it would had been impossible to have a method like sort, which could take any kind of arrays(Remember there was no generics then, so the only way to be able to take all kinds of array as argument was to make them co-variant). Obviously many modern languages have marked Arrays as invariant and use generics to exhibit parametric polymorphism. (i.e. @code{String[]} becomes @code{Array<String>})
      @p
        Co-Variant Arrays are also a reason why arrays of generic classes are illegal:
      @pairs
        @half
          @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="ArrayList<String>[]", end="//end")  
        @half
          @exampleWrapper
            @hl.ref(wd/'generics/'src/'main/'resources/"Variance.java", start="//If it", end="//end")  
      @p
        Hence the compiler does not let you create arrays of generic classes. Though there is an exception:
        @hl.scala
          ArrayList<?>[] ls = new ArrayList<?>[0];
        @p 
          The explanation on why its legal is left as food for thought to readers.  
  
      @p 
        An important insight we get from above experience is: @b{Co-variance might not go well with mutability}
    @sect{Writes & Reads}    
      @sect{Writes}
        @p
          Lets look at some examples. @b{All the commented ones represent a compiler error}:
        @hl.ref(wd/'generics/'src/'main/'java/"Writes.java", start="contravariant", end="//end")  
        @p 
          @code{ls1} is a list of some unknown type. This unknown type is a super type of @code{Animal}. When we try adding elements to 
          this list, the @code{add} method becomes:
        @hl.scala
          public void add((? super Animal) elem)
        @p
          So now you can pass any element of a type say @code{t} to @code{add} such that, @code{t <: (? super Animal)}. And:
        @hl.scala
          Animal <: (? super Animal)
          Dog <: (? super Animal)
          //Object is not a super type of (? extends Animal). Hence ls1.add(new Object()) gives error
        @p
          Some more examples:
        @hl.ref(wd/'generics/'src/'main/'java/"Writes.java", start="ls2", end="//end")  
        @hr
        @p
          Some examples with covariant variables
        @hl.ref(wd/'generics/'src/'main/'java/"Writes.java", start="covariant", end="//end")  
        @p 
          @code{ls1} is a list of some unknown type. This unknown type is a sub type of @code{Animal}. When we try adding elements to 
          this list, the @code{add} method becomes:
        @hl.scala
          public void add((? extends Animal) elem)
        @p
          So now you can pass any element of a type say @code{t} to @code{add} such that, @code{t <: (? extends Animal)}. When we say @code{? extends Animal},
          we mean some unknown type which is a subtype of Animal. Unless we do not know this unknown type, it is impossible to find @code{t} which is subtype of this unknown type.
          Hence the compiler gives error for @code{ls1.add(new Dog())} and so. Some more brain teasers:
        @hl.ref(wd/'generics/'src/'main/'java/"Writes.java", start="lls2", end="//end")  
        @p
          After all the above examples, it is apparent that:
        @blockquote{@u{Contra-Variance are great when it comes to consuming something. Co-variance is horrible in those cases}}
      @sect{Reads}
        @hl.ref(wd/'generics/'src/'main/'java/"Reads.java", start="covariant", end="//end")  
        @p
          @code{ls1} is a list of some unknown type. This unknown type extends @code{Animal}. When we try to do @code{ls1.get(0)}, it returns a variable of type @code{? extends Animal}.
          So the refernce type of the variable which gets it has to be:
        @hl.scala
            (? extends Animal) <: The type t of reference variable
        @p
            This means all types equal to @code{Animal} and above are suitable to get it. Hence it workds for @code{Animal} & @code{Object} but not @code{Dog}. Some other similar cases:
        @hl.ref(wd/'generics/'src/'main/'java/"Reads.java", start="ls2", end="//end")  
        @hr
        @p
          Examples with @code{? super}
        @hl.ref(wd/'generics/'src/'main/'java/"Reads.java", start="contravariance", end="//end")  
        @p
          When we do @code{lls1.get(0)}, it returns variable of unknown type which is also a super type of @code{Animal}. So the reference type
          which points to this variable has to be of type @code{t} such that
        @hl.scala
          (? super Animal) <: t
        @p
          Only one such @code{t} can exist, and that is @code{Object} class. Hence it gives errors at other lines. More cases:
        @hl.ref(wd/'generics/'src/'main/'java/"Reads.java", start="lls2", end="//end")              
        @p
          Another interesting insight from above:
        @blockquote{@u{Co-variance are greate when it comes to producing/reads. Contra-Variance is horrible in those case}}        
        @hr
        @p
          Summing above experiences:         
        @blockquote{@u{@b{Co-Variance is great for producing/reads. Contra-Variance is great for consuming/writes}}}    
        @hr
        @p 
          Some more brain teasers:
        @hl.ref(wd/'generics/'src/'main/'java/"Writes.java", start="ls4", end="//end")         
    
    @sect{Library Examples}
      @p
        After knowing the stregths and weeknesses of covariance and contravariance, lets see their impact on class design in several classes in JDK        
      @sect{ArrayList}
        @sect{foreach}
          @p 
            If we were to design @code{foreach} method in class @code{ArrayList<T>}, how would it be? @code{foreach} is like a side-effect, you pass the element of the list iteratively to extenal consumer.
            The first simplest option would be to:
          @hl.scala
            public void forEach(Consumer<T> action)   
          @p
            This does the job, but it levies an unnecessary constraint on generic type of @code{Consumer} to be as same type @code{T} of List.
            What if we wanted to do this:
          @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="fe", end="//end")           
          @p 
            This would throw error with our definition of @code{foreach}. And it shouldn't. So lets improvize. Let @code{Consumer} argument be of type variable @code{E}. 
            Because we know consumer will be consuming elements, the type @code{E} has to:
          @hl.scala
            E >: T
            // This means
            ? super T //Hence we get:
            public void forEach(Consumer<? super T> consumer) 
          @p 
            This is also how JDK defines it in @a("ArrayList.foreach",href:="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/3cbb65d9af9e/src/share/classes/java/util/ArrayList.java#l1225").
            Notice again how nicely contra-variance fits in when we have to consume something. Other similar examples where we consume elements:
          @hl.scala
            public boolean removeIf(Predicate<? super E> filter)
            public void sort(Comparator<? super E> c) 
        @sect{addAll}  
          If we were to design @code{addAll} method in class @code{ArrayList<T>}, the simplest solution would be to:
          @hl.scala
            public boolean addAll(Collection<T> c)
          @p
            This again is too restrictive. What if you wanted to do:  
          @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="addAll", end="//end")
          @p
            This would give a compiler error with our definition of @code{addAll}. We can improve this. With addAll we want to be able to take any collection of a type @code{E} such that:
          @hl.scala              
            E <: T
            //Hence
            public <E extends T> boolean addAll(Collection<E> c)
          @p
            This is also how @a("jdk",href:="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/3cbb65d9af9e/src/share/classes/java/util/ArrayList.java#l561") defines it (Instead of type variable, they use bound).
            Notice we will be reading from collection and how nicely covariance fits in.
      
      @sect{Collections.min}
        @p
          Lets try defining @code{Collections.min}. This method should:
        @ul
          @li 
            Take a collection as argument
          @li 
            The type of collection should extend Comparable (So that we can compare them)
          @li 
            Return the minumum element in collection based on Comparable.
        @p
          The simplest way to do it would be by:
        @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="min1", end="//end")
        @p
          From our experience, we know it is restrictive. Lets improve it. We know, we will be: 
        @ul
          @li
            Reading from the collection. Covariance fits in well here.
          @li 
            Comparator will be consuming it. Contra-Variance fits well here
        @p 
          So what we get is this:        
        @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="min2", end="//end")  
        @p
          Saw how simple it was? It looks scary but understanding covariance and contravariance helped us. JDK defines the method as:
        @hl.scala
          static <T extends Object & Comparable<? super T>> T 
                                                  min(Collection<? extends T> coll) 
        @p 
          They also do @code{T extends Object}. This is required for backward compatibility purpose. In Pre-Java5 era, @code{min} would take a collection of @code{Object's}
          and return an @code{Object}. In our definition of min, it would return a @code{Comparable} and not @code{Object}. Putting a dummy @code{T extends Object} tricks the compiler to be able to return an @code{Object}. @a("This",href:="http://www.angelikalanger.com/GenericsFAQ/FAQSections/ProgrammingIdioms.html#FAQ104") is a good read on it.
      @sect{Collections.copy}
        @p
          Lets try implemention a copy function that will copy elements from a list to another. We will be reading from a list and writing in another:
        @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="copy", end="//end")  
        @p 
          This does the job. There is also an alternative way. We know that we will be:
        @ul
          @li
            Reading from src. Co-Variance will fit well.
          @li
            Write in dest. Contra-Variance will fit well.            

        @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="copy2", end="//end")  
        @p
          This will also do the job. Some more similar interesting scenarios:
        @hl.scala
          <T> int binarySearch(List<? extends Comparable<? super T>> list, T key)
          <T> void fill(List<? super T> list, T obj) 
          <T> List<T> unmodifiableList(List<? extends T> list)
          <T> T max(Collection<? extends T> coll, Comparator<? super T> comp) 

      @sect{Object.getClass}
        @p
          A tricky one. @a("Object.getClass",href:="http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/lang/Object.java#l64") is defined as:
        @hl.scala
          public final native Class<?> getClass();
        @p 
          But in reality, the compiler returns @code{Class<? extends |X|>} where |X| is the erasure of the reference class on which @code{getClass} is called. For example:
        @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="Dog a", end="//end")  
        @p
          Compiler is doing some extra magic here. The question is: Why does it return @code{Class<? extends |X|>} rather than @code{Class<|X|>}? i.e. why doesnt it do:
        @hl.scala
          Class<Dog> aa = a.getClass();        
          Class<Animal> bb = b.getClass();
        @p
          The above should not be allowed. Because if it did, then @code{b.getClass} would return @code{Class<Animal>}. But in reality,
          the object @code{b} is a @code{Dog}. Which means @code{Class<Dog>} is the actual class object returned when we do @code{b.getClass}.
          And @code{Class<Animal> != Class<Dog>}. Hence @code{Class<? extends |X|>} is a safer bet. (Covariance again as reads).
        @p 
          A similar scenario can be found with @a("Class.asSubClass",href:="http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#asSubclass(java.lang.Class)") 
        @hl.scala
          <U> Class<? extends U> asSubclass(Class<U> clazz) 
    
    @sect{Function}      
      @p
        In all our cases till now, we have been dealing with classes with only one parametric type. Rules and behavior do not change will increasing rank in parametricity.
      @p
        A Function like in true mathematical sense, takes an input and returns an output (Ideally with no @a("side-effects",href:="http://en.wikipedia.org/wiki/Side_effect_%28computer_science%29")). An example:
      @hl.scala
        Function<Integer, String> f = (Integer i) -> String.valueOf(i);
        //`f` is a function from `Integer => String`
      We can do transformations with functions:
      @hl.scala
        Let f = Integer => String
        Let g = String => String

        Then f o g = Integer => Integer
             g o f = String  => String
      @p
        Lets try building this transformation. The simplest solution would be to:
      @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="<A,B,C>", end="//end")  
      @p
        This isn't a great solution. Because:
      @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="andThenFail", end="//end")  
      @p
        So we need to do better. Lets analyze it. For the composition @code{f o g}:
      @ul
        @li
          We will be writing an argument to `f`. So Contra-Variance
        @li
          `f` will then return the value. Read hence Co-Variance
        @li 
          The returned value by `f` will be written to `g`. Again Contra-Variance
        @li
          `g` will return the final value. Co-Variance
      @p
        Hence we get:
      @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="andThen2", end="//end")  
      @hl.ref(wd/'generics/'src/'main/'java/"Lib.java", start="fog", end="//end") 
      @p
        @a("andThen",href:="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html#andThen-java.util.function.Function-") and @a("compose",href:="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html#compose-java.util.function.Function-") of @a("Function.java",href:="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html") are built on the same principles.


        



  @hr
  @sect{More Interesting Stuff}
    @p 
      Mind You! Some super awesome stuff on the way!
    @sect{Capture Type}
      @p
        Is it possible to obtain @u{information about generic types at runtime?}. Well it is possible, but its dirty:
      
      @hl.ref(wd/'generics/'src/'main/'java/"GetType.java",start="Outer",end="//end")           
      @hl.ref(wd/'generics/'src/'main/'java/"GetType.java",start="Field",end="//end")           
      
      @p
        Once you have @code{claz} variable, you can then create its instances. Lets go a step ahead... 
      @p 
        Low lets try building a class which will make it very easy to access parametric type information. I have called the class @a("CaptureType",href:="https://gist.github.com/purijatin/a0486995c7df0e56b398") and it lets you @u{capture the generic type of a parametrized class}.
        Some use cases:
      @hl.ref(wd/'generics/'src/'main/'java/'types/"UseCases.java", start="Example<S>",end="//end")       
      @p
        So now we are able to get Integer.class object at runtime. Some more bazooka stuff:
      @hl.ref(wd/'generics/'src/'main/'java/'types/"UseCases.java", start="X<T>",end="//end")
      @p
        Works! This is what @a("mockito",href:="http://mockito.org/") exactly does (In fact @code{CaptureType} was inspired from mockito).
        Though there are some limitations:
      @hl.ref(wd/'generics/'src/'main/'resources/"Wontwork.java")
      @p 
        Please look at the @a("source",href:="https://gist.github.com/purijatin/a0486995c7df0e56b398") to know more. You might also want to look at @a("TypeTools",href:="https://github.com/jhalterman/typetools") which is a library to resolve generic type information declared on a class, method or even lambda.
        But they use similar techniques as above to obtain the information.
      @hr
      @sect{New Instance}
        @p
          Most of the time, you dont have to go this far to obtain parametric type information. And in cases where you are interested, there is an easy way out:
        @hl.ref(wd/'generics/'src/'main/'java/'types/"KnowType.java",start="KnowType",end="//end")
        @hl.scala
          KnowType<Animal> a = new KnowType<Animal>(Animal.class);
          Animal a = a.getTypeInfo().newInstance();
        @p
          @code{Class<T>} preserves the information. Please refer @a("Class",href:="http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html") api for creating instances with constructors and much more. 
          In case of generic arrays, you can:
        @hl.ref(wd/'generics/'src/'main/'java/'types/"KnowType.java",start="KnowArray",end="//end")        
    
    @sect{Java Type-System}
      @p
        Some more general details on Java and JVM's type system capabilities. Java is Nominally Typed.
      @sect{Nominal Typing}
        @p
          What it means is:
        @hl.ref(wd/'generics/'src/'main/'resources/"TypeSys.java",end="//end")  
        @p
          Even though @code{city} and @code{country} are exactly the same in construct and meaning, you cannot pass
          country to @code{storeInDb}. This is because the method argument is nominal to take only City. Basically, 
          class names inside objects are part of what it means to be an object. Class name information inside an object is called its nominal information.
          To emphasize the fact that objects in class-based OOP have class names as part of their meaning they are sometimes called nominal objects.
        
        @p
          Some programming languages instead take arguments not based on nominal type but rather based on structure of the data type. ML and Haskell are structurally typed. Scala has a some flavors of it:
        @hl.ref(wd/'generics/'src/'main/'resources/"TypeSys.java",start="foo",end="//end")  
        @p
          Here @code{foo} can take any argument which has a method @code{getName} in it. Its based on structure rather than the name of the type.
          If you think even java8 has some small flavors of it in lambda. For example:
        @hl.scala
          Comparator<Integer> a1 = (x, y) -> Integer.compare(x, y);
          BiFunction<Integer, Integer, Integer> a2 = (x, y) -> Integer.compare(x, y);
          BinaryOperator<Integer> a3 = (x, y) -> Integer.compare(x, y);
        @p 
          You can assign any Functional Interface based on the structure of lambda. The evolution and design of lambdas is quite interesting,
          especially after the influence of Type-Erasure. @a("This",href:="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html") is a very very good read.

      @sect{Static & Strong}    
        @p
          Java is statically typed. Which means the compiler does not let you do:
        @hl.scala
          Animal a = "123";
        @p
          Statically typed means that the compiler wont let you assign data/construct with a type which does not define it. Java is Strongly Typed. 
          This means even at runtime you cannot wrongly assign a type to something it is not:
        @hl.scala
            Integer i = 23;
            String s = (String) i; 
            //ClassCastException. It knows at runtime that it an Int and not a String.
        @sect{Type Inference}        
          @p
            Type Inference refers to the abiliy to deduce the type of a datatype or an expression automatically. Java Compiler
            leverages its type inference power to deduce type automatically. Some simple examples would be:
          @hl.scala
            List<String> ls = new ArrayList<>();
          @p
            Here the compiler it self realizes that the object is of type @code{ArrayList<String>}. Some other examples:
          @hl.scala
            List<String> ls = Collections.emptyList(); 
            //compiler infers `Collections.emptyList()` to `Collections.<String>emptyList()`
            Collections.max(Arrays.asList(1,2,3),(x,y) -> Integer.compare(x,y));
            //compiler infers the lambda to Comparator<Integer>
          @p
            Many functional languages go very far to infer types. Even to an extent that you do not specify types anywhere in your program.
            Interested people should have a look at @a("Hindley-Miler Type System",href:="http://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system"). It has been extremely influentional in type system of 
            ML, OCaml, Haskell, F# etc.
@sect{References}        
    @p
      @ul
        @li 
          To get started: @a("https://docs.oracle.com/javase/tutorial/java/generics/",href:="https://docs.oracle.com/javase/tutorial/java/generics/")
        @li 
          When you are stuck: @a("http://www.angelikalanger.com/GenericsFAQ/FAQSections/ProgrammingIdioms.html",href:="http://www.angelikalanger.com/GenericsFAQ/FAQSections/ProgrammingIdioms.html")
        @li
          For precise insights: @a("https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html",href:="https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html")
        @li
          To know more on types: @a("TAPL",href:="http://www.cis.upenn.edu/~bcpierce/tapl/")
        @li
          @a("http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html",href:="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html")
        @li  
          @a("http://cr.openjdk.java.net/~jrose/values/values-0.html",href:="http://cr.openjdk.java.net/~jrose/values/values-0.html")  
        @li
          @a("http://cr.openjdk.java.net/~briangoetz/valhalla/specialization.html",href:="http://cr.openjdk.java.net/~briangoetz/valhalla/specialization.html")  
    @hr

  @footer    
    @div(opacity:="0.6",fontStyle.oblique)
      @p
        This booklet has been generated using @a("Scalatex",href:="https://github.com/lihaoyi/Scalatex") developed by @a("Li Haoyi",href:="https://github.com/lihaoyi"). You might want to look at it. Its easier to setup than @a("Jekyll",href:="http://jekyllrb.com/") and certainly more expressive than Wordpress. And provides compile time @i("like") type safety.
    
      