Generics:

	- Type Erasure
	- Reifiables
		Array Example vs List
		List<int> Project-Valhalla

	Generics:
		Sub and Super Typing
			Liskov Substitution Principle


		Co-Variance & Contra-Variance
			Using notation.
			Array Example		
			ability to do above using wild-cards
			Numorous example showcasing above. Writes and Writes
			Class design using them.
				Examples: Collections.max, Collections.copy, Collectors.
			Examples:
				public ArrayList(Collection<? extends E> c) 
					
			Assignment: Design Function

		Type-Inference (Probable)
		Structural typing
		Nominal typing

	Advanced:	
		CaptureType, For Fields (http://stackoverflow.com/questions/1942644/get-generic-type-of-java-util-list)
			This technique is extensively used by Mockito
		Why Erasure is a good thing


	Other Topics: 
		toArray
		Reflection
		Backward Compatibility
			http://stackoverflow.com/questions/745756/java-generics-wildcarding-with-multiple-classes
			i think map.get
		Retain type: Use Class<?> of the parameter
		Varargs
		wild car dis existential type: https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.8

	1) Generic Array creation
	2) Use Class for instance creation
		public class GenericClass<T> {
		     private final Class<T> type;	
		     public GenericClass(Class<T> type) {
		          this.type = type;
		     }
		     public Class<T> getMyType() {
			 return this.type;
		     }
		}
	mention this: https://github.com/jhalterman/typetools
	3) 
